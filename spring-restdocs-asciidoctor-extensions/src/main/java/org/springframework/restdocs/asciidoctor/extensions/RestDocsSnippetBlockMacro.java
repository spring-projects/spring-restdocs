/*
 * Copyright 2014-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.restdocs.asciidoctor.extensions;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

import org.asciidoctor.Asciidoctor;
import org.asciidoctor.OptionsBuilder;
import org.asciidoctor.ast.AbstractBlock;
import org.asciidoctor.extension.BlockMacroProcessor;

/**
 * Block macro to include snippets generated by Spring Rest Docs in a convenient way.
 * Defaults to <i>build</i> (gradle) or <i>target</i> directory to look for the generated-snippets folder and its content.
 *
 * @author Gerrit Meier
 */
class RestDocsSnippetBlockMacro extends BlockMacroProcessor {

	private static final String GENERATED_SNIPPETS_PATH = "generated-snippets";
	private static final String MAVEN_TARGET_PATH = "target" + File.separator + GENERATED_SNIPPETS_PATH;
	private static final String GRADLE_BUILD_PATH = "build" + File.separator + GENERATED_SNIPPETS_PATH;
	private static final String MAVEN_POM = "pom.xml";

	public RestDocsSnippetBlockMacro(String macroName, Map<String, Object> config) {
		super(macroName, config);
	}

	@Override
	protected Object process(AbstractBlock parent, String fileToInclude, Map<String, Object> attributes) {
		String generatedSnippetPath = getDefaultOutputDirectory() + File.separator + fileToInclude;

		// since 'pass' context does not convert the content, we have to do this manually
		String convertedContent = Asciidoctor.Factory.create().convertFile(
				new File(generatedSnippetPath),
				OptionsBuilder.options().toFile(false).inPlace(false).get());

		return createBlock(parent, "pass", convertedContent, attributes, getConfig());
	}

	private static String getDefaultOutputDirectory() {
		String executingDirectory = Paths.get(".").toFile().getAbsolutePath();

		if (Files.exists(Paths.get(MAVEN_POM))) {
			return executingDirectory + File.separator + MAVEN_TARGET_PATH;
		}
		return executingDirectory + File.separator + GRADLE_BUILD_PATH;
	}
}
